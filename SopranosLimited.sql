CREATE DATABASE SopranosLimited;
Use SopranosLimited;

CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(100),
    email VARCHAR(100),
    region_id INT
);

UPDATE Customers 
SET customer_id = "105"
WHERE customer_id = "106";

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    name VARCHAR(100),
    category VARCHAR(50),
    price DECIMAL(10, 2)
); 

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id) 
    ON DELETE CASCADE
    ON UPDATE CASCADE
);

CREATE TABLE OrderDetails (
    order_detail_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
    ON DELETE CASCADE 
    ON UPDATE CASCADE
);

CREATE TABLE Regions (
    region_id INT PRIMARY KEY,
    region_name VARCHAR(50)
);

INSERT INTO Regions (region_id, region_name) VALUES
(1, 'North'),
(2, 'South'),
(3, 'East'),
(4, 'West');

INSERT INTO Customers (customer_id, name, email, region_id) VALUES
(101, 'Alice Johnson', 'alice@example.com', 1),
(102, 'Bob Smith', 'bob@example.com', 2),
(103, 'Charlie Brown', 'charlie@example.com', 3),
(104, 'Diana Green', 'diana@example.com', 4),
(105, 'Ethan Wright', 'ethan@example.com', 1);

INSERT INTO Products (product_id, name, category, price) VALUES
(201, 'Laptop', 'Electronics', 700.00),
(202, 'Mouse', 'Electronics', 25.00),
(203, 'Desk Chair', 'Furniture', 120.00),
(204, 'Notebook', 'Stationery', 5.00),
(205, 'Pen Set', 'Stationery', 8.00);

INSERT INTO Orders (order_id, customer_id, order_date) VALUES
(301, 101, '2025-03-05'),
(302, 102, '2025-03-18'),
(303, 103, '2025-04-10'),
(304, 104, '2025-04-21'),
(305, 105, '2025-05-01');

SELECT * FROM customers;

INSERT INTO OrderDetails (order_detail_id, order_id, product_id, quantity) VALUES
(401, 301, 201, 1),   -- Alice bought 1 Laptop
(402, 301, 202, 2),   -- Alice bought 2 Mice
(403, 302, 203, 1),   -- Bob bought 1 Desk Chair
(404, 303, 204, 5),   -- Charlie bought 5 Notebooks
(405, 304, 205, 3),   -- Diana bought 3 Pen Sets
(406, 305, 201, 1),   -- Ethan bought 1 Laptop
(407, 305, 204, 2);   -- Ethan bought 2 Notebooks

-- =====================
-- ANALYTICAL SQL QUERIES
-- =====================

-- 1. Total Revenue Generated by Each Product
SELECT 
    p.name AS product_name,
    SUM(od.quantity * p.price) AS total_revenue
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    p.name
ORDER BY 
    total_revenue DESC;

-- 2. Most Popular Product by Quantity Sold
SELECT 
    p.name AS product_name,
    SUM(od.quantity) AS total_quantity_sold
FROM 
    OrderDetails od
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    p.name
ORDER BY 
    total_quantity_sold DESC
LIMIT 1;

-- 3. Revenue by Region
SELECT 
    r.region_name,
    SUM(od.quantity * p.price) AS total_revenue
FROM 
    OrderDetails od
JOIN 
    Orders o ON od.order_id = o.order_id
JOIN 
    Customers c ON o.customer_id = c.customer_id
JOIN 
    Products p ON od.product_id = p.product_id
JOIN 
    Regions r ON c.region_id = r.region_id
GROUP BY 
    r.region_name
ORDER BY 
    total_revenue DESC;

-- 4. Top Customers by Total Purchase Value
SELECT 
    c.name AS customer_name,
    SUM(od.quantity * p.price) AS total_spent
FROM 
    OrderDetails od
JOIN 
    Orders o ON od.order_id = o.order_id
JOIN 
    Customers c ON o.customer_id = c.customer_id
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    c.name
ORDER BY 
    total_spent DESC
LIMIT 5;

-- 5. Monthly Sales Trends
SELECT 
    DATE_FORMAT(o.order_date, '%Y-%m') AS month,
    SUM(od.quantity * p.price) AS monthly_sales
FROM 
    OrderDetails od
JOIN 
    Orders o ON od.order_id = o.order_id
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    month
ORDER BY 
    month ASC;

-- 6. Average Order Value per Customer
SELECT 
    c.name AS customer_name,
    COUNT(DISTINCT o.order_id) AS total_orders,
    SUM(od.quantity * p.price) / COUNT(DISTINCT o.order_id) AS avg_order_value
FROM 
    OrderDetails od
JOIN 
    Orders o ON od.order_id = o.order_id
JOIN 
    Customers c ON o.customer_id = c.customer_id
JOIN 
    Products p ON od.product_id = p.product_id
GROUP BY 
    c.name
ORDER BY 
    avg_order_value DESC;

